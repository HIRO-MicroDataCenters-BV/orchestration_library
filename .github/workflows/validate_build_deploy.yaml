---
# This workflow builds and deploys
# the Orchestration API Docker image to Docker Hub
# and deploys it to a Kubernetes cluster using Helm.

name: Build and Deploy the Orchestration API

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    outputs:
      repo-path: ${{ steps.set-repo-path.outputs.repo-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set repo path output
        id: set-repo-path
        run: echo "repo-path=${GITHUB_WORKSPACE}" >> $GITHUB_OUTPUT

  validate:
    name: Validate Python, YAML file Syntax and Testcoverage
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint Python files
        run: |
          pylint app/ --fail-under=${{ vars.PYLINT_EXPECTED_SCORE }}

      - name: Run tests with coverage
        run: pytest --cov=app --cov-fail-under=${{ vars.PYTEST_EXPECTED_PERCENTAGE }} app/tests/

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Lint Helm chart
        run: helm lint charts/orchestration-api

  test-db-migrations:
    name: Test Alembic DB Migrations
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orchestration_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5433 -U postgres && break
            sleep 2
          done

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Alembic migrations
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5433/orchestration_db
        run: alembic upgrade head

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      image_name: ${{ steps.set-image.outputs.image_name }}
      image_tag: ${{ steps.set-image.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        id: set-image
        run: |
          IMAGE_TAG=${{ vars.ORCHESTRATION_API_IMAGE_TAG }}-$(date +%Y%m%d%H%M%S)
          docker build -t ${{ vars.ORCHESTRATION_API_IMAGE_NAME }}:$IMAGE_TAG .
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_name=${{ vars.ORCHESTRATION_API_IMAGE_NAME }}" >> $GITHUB_OUTPUT

      - name: Push Docker image
        if: github.event_name == 'push'
        run: |
          docker push ${{ vars.ORCHESTRATION_API_IMAGE_NAME }}:${{ steps.set-image.outputs.image_tag }}

  helmPublish:
    name: Publish Helm Charts
    runs-on: ubuntu-latest
    # if: github.event_name == 'push'
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for versioning

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add kubernetes-dashboard dependency Helm repo
        run: helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/

      - name: Update Helm dependencies for k8s-dashboard chart
        run: helm dependency update ./charts/k8s-dashboard

      - name: Build Helm dependencies for k8s-dashboard chart
        run: helm dependency build ./charts/k8s-dashboard

      - name: Update Helm dependencies for orchestration-api chart
        run: helm dependency update ./charts/orchestration-api

      - name: Build Helm dependencies for orchestration-api chart
        run: helm dependency build ./charts/orchestration-api

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          skip_existing: true
          packages_with_index: true
          pages_branch : gh-pages
          mark_as_latest: true
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}" 

      - name: Publish Helm charts
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Helm repo access URL
        run: |
          echo "Helm repo published at:"
          echo "https://${{ github.repository_owner }}.github.io/orchestration_library/index.yaml"
          echo ""
          echo "To use this repo:"
          echo "helm repo add orchestration_library https://${{ github.repository_owner }}.github.io/orchestration_library"
          echo "helm repo update"
          echo "helm install my-release orchestration_library/k8s-dashboard"
          echo "helm install my-release orchestration_library/orchestration-api"

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs:
      - build-and-push
      - test-db-migrations
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "latest"

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.HIRO_KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Add kubernetes-dashboard Helm repo
        run: helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/

      - name: Update Helm dependencies for k8s-dashboard chart
        run: helm dependency build ./charts/k8s-dashboard

      - name: Update Helm dependencies for orchestration-api chart
        run: helm dependency build ./charts/orchestration-api

      - name: Set Helm dry-run flag
        id: helm-dry-run
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "flag=" >> $GITHUB_OUTPUT
          else
            echo "flag=--dry-run" >> $GITHUB_OUTPUT
          fi

      - name: Deploy the Kubernetes Dashboard with reverse proxy to the cluster
        # Ignore CSRF secret template errors in dry-run/template mode
        # (see https://github.com/kubernetes/dashboard/issues/7908)
        # This step will always pass, even if the CSRF error occurs, due to '|| true'
        run: |
          helm upgrade --install ${{ vars.KUBERNETES_DASHBOARD_RELEASE_NAME}} ./charts/k8s-dashboard \
            --namespace ${{ vars.KUBERNETES_DASHBOARD_NAMESPACE }} \
            --create-namespace \
            --set serviceAccountName=${{ vars.KUBERNETES_DASHBOARD_RO_SA }} \
            --set reverseProxy.name=aces-dashboard-reverse-proxy \
            --set reverseProxy.service.port=80 \
            --set reverseProxy.service.type=${{ vars.KUBERNETES_DASHBOARD_SERVICE_TYPE }} \
            --set reverseProxy.service.nodePort=${{ vars.KUBERNETES_DASHBOARD_NODE_PORT }} \
            ${{ steps.helm-dry-run.outputs.flag }}

      - name: Set Dashboard URL
        id: set-dashboard-url
        run: |
          if [[ -n "${{ secrets.KUBERNETES_DASHBOARD_URL }}" ]]; then
            DASHBOARD_URL="${{ secrets.KUBERNETES_DASHBOARD_URL }}"
          elif [[ "${{ vars.KUBERNETES_DASHBOARD_SERVICE_TYPE }}" == "NodePort" ]]; then
            DASHBOARD_URL="http://${{ secrets.KUBERNETES_DASHBOARD_NODE_IP }}:${{ vars.KUBERNETES_DASHBOARD_NODE_PORT }}/"
          else
            DASHBOARD_URL=""
          fi
          echo "dashboard_url=$DASHBOARD_URL" >> $GITHUB_OUTPUT

      - name: Deploy Orchestration API Helm chart
        run: |
          helm upgrade --install ${{ vars.ORCHRESTRATION_API_RELEASE_NAME }} ./charts/orchestration-api \
            --namespace ${{ vars.ORCHESTRATION_API_NAMESPACE }} \
            --create-namespace \
            --set app.image.repository=${{ vars.ORCHESTRATION_API_IMAGE_NAME }} \
            --set app.image.tag=${{ needs.build-and-push.outputs.image_tag }} \
            --set app.service.type=${{ vars.ORCHESTRATION_API_SERVICE_TYPE }} \
            --set app.service.nodePort=${{ vars.ORCHESTRATION_API_NODE_PORT }} \
            --set k8sDashboard.serviceAccountName=${{ vars.KUBERNETES_DASHBOARD_RO_SA }} \
            --set k8sDashboard.accessURL=${{ steps.set-dashboard-url.outputs.dashboard_url }} \
            --set k8sDashboard.reverseProxy.service.type=${{ vars.KUBERNETES_DASHBOARD_SERVICE_TYPE }} \
            --set k8sDashboard.reverseProxy.service.nodePort=${{ vars.KUBERNETES_DASHBOARD_NODE_PORT }} \
            --set runMigration=true \
            --set global.postgresql.auth.postgresPassword=postgress \
            --set global.postgresql.auth.password=postgress \
            ${{ steps.helm-dry-run.outputs.flag }}
      - name: Wait for Alembic migration job and show logs
        if: github.event_name == 'push'
        run: |
          JOB_NAME=$(kubectl get jobs -n ${{ vars.ORCHESTRATION_API_NAMESPACE }} -o json \
            | jq -r '.items | map(select(.metadata.name | startswith("alembic-migration-"))) | sort_by(.metadata.creationTimestamp) | last(.[]).metadata.name')

          echo "Waiting for Job: $JOB_NAME"
          kubectl wait --for=condition=complete --timeout=60s job/$JOB_NAME -n ${{ vars.ORCHESTRATION_API_NAMESPACE }}
          JOB_STATUS=$?

          echo "Job status:"
          kubectl describe job $JOB_NAME -n ${{ vars.ORCHESTRATION_API_NAMESPACE }} || true
          echo "Pods for job:"
          kubectl get pods -n ${{ vars.ORCHESTRATION_API_NAMESPACE }} -l job-name=$JOB_NAME -o wide || true

          POD_NAME=$(kubectl get pods -n ${{ vars.ORCHESTRATION_API_NAMESPACE }} -l job-name=$JOB_NAME -o jsonpath="{.items[0].metadata.name}")
          if [ -z "$POD_NAME" ]; then
            echo "No pods found for Alembic migration job. Check job status above."
            exit 1
          fi

          # Wait for pod to be in a loggable state (Running, Succeeded, or Failed)
          for i in {1..10}; do
            PHASE=$(kubectl get pod -n ${{ vars.ORCHESTRATION_API_NAMESPACE }} $POD_NAME -o jsonpath="{.status.phase}")
            if [[ "$PHASE" == "Running" || "$PHASE" == "Succeeded" || "$PHASE" == "Failed" ]]; then
              break
            fi
            echo "Pod $POD_NAME is in $PHASE state, waiting for it to be loggable..."
            sleep 5
          done

          echo "Pod logs:"
          kubectl logs -n ${{ vars.ORCHESTRATION_API_NAMESPACE }} $POD_NAME || true

          # Fail the step if the job did not succeed
          if [ $JOB_STATUS -ne 0 ]; then
            echo "Alembic migration job failed or timed out."
            exit 1
          fi
