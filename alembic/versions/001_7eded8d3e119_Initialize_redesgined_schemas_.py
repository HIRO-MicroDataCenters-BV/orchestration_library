"""Initialize re-desgined schemas

Revision ID: 7eded8d3e119
Revises: 
Create Date: 2025-06-17 15:04:35.177646

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7eded8d3e119'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('alerts')
    op.drop_table('tuning_parameters')
    op.drop_table('pod_request_decision')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('pod_request_decision',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pod_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pod_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('namespace', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_elastic', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('queue_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('demand_cpu', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('demand_memory', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('demand_slack_cpu', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('demand_slack_memory', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_decision_status', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('pod_parent_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pod_parent_kind', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pod_request_decision_pkey')
    )
    op.create_table('tuning_parameters',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('output_1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('output_2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('output_3', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('alpha', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('beta', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gamma', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tuning_parameters_pkey')
    )
    op.create_table('alerts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('alert_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pod_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("alert_type::text = ANY (ARRAY['Abnormal'::character varying, 'Network-Attack'::character varying, 'Other'::character varying]::text[])", name='alerts_alert_type_check'),
    sa.PrimaryKeyConstraint('id', name='alerts_pkey')
    )
    # ### end Alembic commands ###
