"""Initialize redesgined schemas

Revision ID: 0af4db42c33f
Revises: 
Create Date: 2025-07-04 15:47:09.094693

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0af4db42c33f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('alerts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('alert_type', sa.String(length=50), nullable=False),
    sa.Column('alert_description', sa.Text(), nullable=False),
    sa.Column('pod_id', sa.UUID(), nullable=False),
    sa.Column('node_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alerts_alert_type'), 'alerts', ['alert_type'], unique=False)
    op.create_index(op.f('ix_alerts_created_at'), 'alerts', ['created_at'], unique=False)
    op.create_index(op.f('ix_alerts_node_id'), 'alerts', ['node_id'], unique=False)
    op.create_index(op.f('ix_alerts_pod_id'), 'alerts', ['pod_id'], unique=False)
    op.create_table('tuning_parameters',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('output_1', sa.Float(), nullable=False),
    sa.Column('output_2', sa.Float(), nullable=False),
    sa.Column('output_3', sa.Float(), nullable=False),
    sa.Column('alpha', sa.Float(), nullable=False),
    sa.Column('beta', sa.Float(), nullable=False),
    sa.Column('gamma', sa.Float(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tuning_parameters_id'), 'tuning_parameters', ['id'], unique=False)
    op.create_table('workload_action',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('action_type', sa.Enum('Bind', 'Create', 'Delete', 'Move', 'Swap', name='workload_action_type_enum'), nullable=False),
    sa.Column('action_status', sa.Enum('pending', 'successful', 'failed', 'partial', name='action_status_enum'), nullable=True),
    sa.Column('action_start_time', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('action_end_time', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('action_reason', sa.String(), nullable=True),
    sa.Column('pod_parent_name', sa.String(), nullable=True),
    sa.Column('pod_parent_type', sa.Enum('Deployment', 'StatefulSet', 'ReplicaSet', 'Job', 'DaemonSet', 'CronJob', name='pod_parent_type_enum'), nullable=True),
    sa.Column('pod_parent_uid', sa.UUID(), nullable=True),
    sa.Column('created_pod_name', sa.String(), nullable=True),
    sa.Column('created_pod_namespace', sa.String(), nullable=True),
    sa.Column('created_node_name', sa.String(), nullable=True),
    sa.Column('deleted_pod_name', sa.String(), nullable=True),
    sa.Column('deleted_pod_namespace', sa.String(), nullable=True),
    sa.Column('deleted_node_name', sa.String(), nullable=True),
    sa.Column('bound_pod_name', sa.String(), nullable=True),
    sa.Column('bound_pod_namespace', sa.String(), nullable=True),
    sa.Column('bound_node_name', sa.String(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workload_action_created_at'), 'workload_action', ['created_at'], unique=False)
    op.create_index(op.f('ix_workload_action_id'), 'workload_action', ['id'], unique=True)
    op.create_table('workload_request_decision',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pod_id', sa.UUID(), nullable=False),
    sa.Column('pod_name', sa.String(length=255), nullable=False),
    sa.Column('namespace', sa.String(length=255), nullable=False),
    sa.Column('node_id', sa.UUID(), nullable=False),
    sa.Column('node_name', sa.String(length=255), nullable=False),
    sa.Column('is_elastic', sa.Boolean(), nullable=False),
    sa.Column('queue_name', sa.String(length=255), nullable=False),
    sa.Column('demand_cpu', sa.Float(), nullable=False),
    sa.Column('demand_memory', sa.Float(), nullable=False),
    sa.Column('demand_slack_cpu', sa.Float(), nullable=True),
    sa.Column('demand_slack_memory', sa.Float(), nullable=True),
    sa.Column('is_decision_status', sa.Boolean(), nullable=False),
    sa.Column('pod_parent_id', sa.UUID(), nullable=False),
    sa.Column('pod_parent_kind', sa.Enum('Deployment', 'StatefulSet', 'ReplicaSet', 'Job', 'DaemonSet', 'CronJob', name='pod_parent_type_enum'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workload_request_decision_created_at'), 'workload_request_decision', ['created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workload_request_decision_created_at'), table_name='workload_request_decision')
    op.drop_table('workload_request_decision')
    op.drop_index(op.f('ix_workload_action_id'), table_name='workload_action')
    op.drop_index(op.f('ix_workload_action_created_at'), table_name='workload_action')
    op.drop_table('workload_action')
    op.drop_index(op.f('ix_tuning_parameters_id'), table_name='tuning_parameters')
    op.drop_table('tuning_parameters')
    op.drop_index(op.f('ix_alerts_pod_id'), table_name='alerts')
    op.drop_index(op.f('ix_alerts_node_id'), table_name='alerts')
    op.drop_index(op.f('ix_alerts_created_at'), table_name='alerts')
    op.drop_index(op.f('ix_alerts_alert_type'), table_name='alerts')
    op.drop_table('alerts')
    # ### end Alembic commands ###
