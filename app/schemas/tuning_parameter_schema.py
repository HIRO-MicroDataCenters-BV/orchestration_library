"""
Schemas for tuning parameters.
"""

from datetime import datetime
from pydantic import BaseModel


class TuningParameterBase(BaseModel):
    """
    Base schema for Tuning Parameter
    """

    output_1: float
    output_2: float
    output_3: float
    alpha: float
    beta: float
    gamma: float


class TuningParameterCreate(TuningParameterBase):
    """
    Schema for creating a tuning parameter
    """
    # Inherits all fields from TuningParameterBase


class TuningParameterResponse(TuningParameterBase):
    """
    Schema for tuning parameter response that includes database fields.
    This schema extends the base schema with additional fields that are
    generated by the database.
    """

    id: int
    created_at: datetime

    class Config:
        """
        Configuration class for Pydantic model.
        Provides settings for model behavior and validation.
        """
        orm_mode = True

        def get_orm_mode(self) -> bool:
            """
            Get the ORM mode setting.

            Returns:
                bool: True if ORM mode is enabled
            """
            return self.orm_mode

        def set_orm_mode(self, value: bool) -> None:
            """
            Set the ORM mode setting.

            Args:
                value (bool): New ORM mode value
            """
            self.orm_mode = value
