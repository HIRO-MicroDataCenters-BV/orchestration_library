apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.reverseProxy.configmapName }}
  namespace: {{ .Values.namespace }}
data:
  nginx.conf: |
    worker_processes 1;

    events { worker_connections 1024; }

    http {
        server {
            listen {{ .Values.reverseProxy.service.targetPort }};

            location {{ .Values.reverseProxy.locationPath }} {
                # CORS Preflight
                if ($request_method = OPTIONS) {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                    add_header 'Access-Control-Max-Age' 3600;
                    add_header 'Content-Type' 'text/plain; charset=UTF-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
                
                # Enable CORS
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                
                access_by_lua_block {
                    local token = ngx.var.arg_token or ngx.var.cookie_auth_token

                    if token then
                        -- Set token as a cookie if passed via URL
                        if ngx.var.arg_token then
                            ngx.header["Set-Cookie"] = "auth_token=" .. token .. "; Path={{ .Values.reverseProxy.locationPath }}"
                        end
                        ngx.req.set_header("Authorization", "Bearer " .. token)
                    else
                        ngx.status = ngx.HTTP_FORBIDDEN
                        ngx.say("Missing token")
                        ngx.exit(ngx.HTTP_FORBIDDEN)
                    end
                }

                proxy_pass http://{{ .Release.Name }}-{{ .Values.proxyServiceNameSuffix }}.{{ .Values.namespace }}.svc.cluster.local:{{ .Values.proxyServicePort }}/;
                proxy_set_header Host $host;
            }
        }
    }
